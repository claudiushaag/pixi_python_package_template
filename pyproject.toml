[project]
authors = [{name = "Author", email = "author@author.com"}]
dependencies = []
description = "Template"
name = "Template"
requires-python = ">= 3.11"
version = "0.1.0"

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]

[tool.pixi.dependencies]

[tool.pixi.pypi-dependencies]
# template = { path = ".", editable = true }

[tool.pixi.feature.build.dependencies]
twine = "*"

[tool.pixi.feature.build.pypi-dependencies]
build = "*"

[tool.pixi.feature.build.tasks]
build_exes = {cmd= "rm -r dist; python -m build"}
push_to_pypi = "python -m twine upload --verbose --repository testpypi dist/*"

[tool.pixi.feature.docs.tasks]
build_docs = "sphinx-build -M html docs docs/_build"
push_docs = "bash docs/scripts/update_docs_by_hand.sh"

[tool.pixi.feature.docs.target.win-64.tasks]
# push_docs = "powershell docs/scripts/update_docs_by_hand.ps1"

[tool.pixi.feature.test.tasks]
test = "pytest --junitxml=coverage/junit/test-results.xml --cov=FIXME --cov-report=term --cov-report=xml:coverage/coverage.xml --cov-report=html:coverage/html"
lint = "ruff check"
lint_fix = "ruff check --fix"
lint_gh = "ruff check --output-format=github"
lint_docs_gh = "ruff check --select D,D401 --ignore D417 --output-format=github"
format = "ruff format"
format_diff = "ruff format --diff"
typecheck = "mypy src"
pre-commit-all = "pre-commit run --all-files"
pre-commit-install = "pre-commit install"

[tool.pixi.feature.docs.dependencies]
sphinx = "*"
pydata-sphinx-theme = "*"
sphinxcontrib-mermaid = "*"
nbsphinx = "*"
sphinx-argparse = "*"

[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-cov = "*"
ruff = "*"
pre-commit = "*"
mypy = "*"

[tool.pixi.environments]
build = {features = ["build"]}
default = {features = [], solve-group = "default"}
utility = {features = ["test","docs"], solve-group = "default"}

[tool.ruff.lint]
select = [
    # General errors and warnings
    "E4",  # Indentation and alignment issues
    "E7",  # Syntax errors
    "E9",  # Runtime errors
    "F",   # Pyflakes: undefined names, unused imports, etc.

    # Style and conventions
    "E",    # Pycodestyle: overall style conventions
    "B",    # flake8-bugbear: common pitfalls and potential bugs
    "SIM",  # flake8-simplify: simplifiable constructs and redundant code
    "C90",  # flake8-comprehensions: encourages proper use of comprehensions

    # Python modernization
    "UP",   # pyupgrade: encourages modern Python syntax
    "A",    # flake8-annotations: enforces type hints for better code clarity
    "PT",   # flake8-pytest-style: improves pytest test readability and conventions

    # Imports
    "I",    # isort: ensures import order
    "TID",  # flake8-tidy-imports: removes unused or duplicate imports

    # Complexity
    "C",    # McCabe: limits code complexity (cyclomatic complexity)
    "PLR",  # flake8-pluralize: flags incorrect pluralization in variable names

    # Docstring standards
    "D",     # Pydocstyle: general docstring conventions
    "D401",  # Enforces imperative mood for docstrings
    "RUF",   # ruff-docstrings: additional docstring quality checks

    # NumPy-specific
    "NPY",   # numpy-style: enforces proper NumPy conventions and idioms
    "NPY001",# Enforces correct use of array shapes and dimensions
    "NPY002",# Flags manual creation of identity matrices, suggesting np.eye or np.identity

    # Pandas-specific
    "PD",    # pandas-vet: ensures proper usage of Pandas API
    "PD901", # Encourages vectorized operations over DataFrame.apply or loops
    "PD002", # Flags usage of .ix, recommending modern alternatives (.loc or .iloc)

    # Pathlib-specific
    "PTH",    # pathlib-pure: promotes using Pathlib instead of os.path
]

ignore = [
    # Allow missing parameter documentation in docstrings
    "D417",  # Relax strict requirements for documenting all parameters
    "SIM117", # Allow comparisons to literal True/False for explicit clarity
    "NPY003", # Allow slicing without explicitly defining start/stop/step (e.g., [:])
    "E501",  # personal preference
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
exclude = []
ignore_missing_imports = true
